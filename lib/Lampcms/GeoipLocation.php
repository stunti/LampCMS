<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 */

 
namespace Lampcms;

// +----------------------------------------------------------------------+
// | PHP version 5                                                        |
// +----------------------------------------------------------------------+
// | Copyright (C) 2004 MaxMind LLC                                       |
// +----------------------------------------------------------------------+
// | This library is free software; you can redistribute it and/or        |
// | modify it under the terms of the GNU Lesser General Public           |
// | License as published by the Free Software Foundation; either         |
// | version 2.1 of the License, or (at your option) any later version.   |
// |                                                                      |
// | This library is distributed in the hope that it will be useful,      |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |
// | Lesser General Public License for more details.                      |
// |                                                                      |
// | You should have received a copy of the GNU Lesser General Public     |
// | License along with this library; if not, write to the Free Software  |
// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |
// | USA, or view it online at http://www.gnu.org/licenses/lgpl.txt.      |
// +----------------------------------------------------------------------+
// | Authors: Jim Winstead <jimw@apache.org> (original Maxmind version)   |
// |          Hans Lellelid <hans@xmpl.org>                               |
// +----------------------------------------------------------------------+
//
// $Id: Location.php,v 1.1 2004/07/01 12:51:13 hlellelid Exp $

/**
 * This class represents a location record as returned by Net_GeoIP::lookupLocation().
 *
 * This class is primarily a collection of values (the public properties of the class), but
 * there is also a distance() method to calculate the km distance between two points.
 *
 * @author Hans Lellelid <hans@xmpl.org>
 * @version $Revision: 1.1 $
 * @package Net_GeoIP
 * @see Net_GeoIP::lookupLocation()
 */

class GeoipLocation extends LampcmsObject implements \Serializable
{
	protected $aData = array(
    'countryCode' => null,
	'countryCode3' => null,
    'countryName' => null,
    'region' => null,
    'city' => null,
    'postalCode' => null,
    'latitude' => null,
    'longitude' => null,
    'areaCode' => null,
    'dmaCode' => null
	);

	
	/**
	 * Almost the Same as aData but with short keys,
	 * more suitable for MongoDB
	 * @var unknown_type
	 */
	protected $aData2 = array(
    'countryCode' => 'cc',
    'countryName' => 'cn',
    'region' => 'reg',
    'city' => 'city',
    'postalCode' => 'zip',
    'latitude' => 'lat',
    'longitude' => 'lon'
    );

    
    /**
     * Calculate the distance in km between two points.
     * @param Net_GeoIP_Location $loc The other point to which distance will be calculated.
     * @return float The number of km between two points on the globe.
     */
    public function distance(GeoipLocation $loc){
    	$RAD_CONVERT = M_PI / 180;
    	$EARTH_DIAMETER = 2 * 6378.2;

    	$lat1 = $this->latitude;
    	$lon1 = $this->longitude;
    	$lat2 = $loc->latitude;
    	$lon2 = $loc->longitude;

    	// convert degrees to radians
    	$lat1 *= $RAD_CONVERT;
    	$lat2 *= $RAD_CONVERT;

    	// find the deltas
    	$delta_lat = $lat2 - $lat1;
    	$delta_lon = ($lon2 - $lon1) * $RAD_CONVERT;

    	// Find the great circle distance
    	$temp = pow(sin($delta_lat/2), 2) + cos($lat1) * cos($lat2) * pow(sin($delta_lon/2), 2);
    	return $EARTH_DIAMETER * atan2(sqrt($temp),sqrt(1-$temp));
    }

    /**
     * magic method to make it possible
     * to store this object in cache when
     * automatic serialization is on
     * Specifically it makes it possible to store
     * this object in memcache
     * @return array
     */
    public function serialize(){
    	return serialize($this->aData);
    }

    public function unserialize($serialized){
    	$this->aData = unserialize($serialized);
    }


    /**
     * Setter for elements of $this->aData array
     * Runs val through utf8_encode
     * This is necessary because values of city or region
     * could be in non-utf8 encoding
     * 
     * @todo must test it thoroughly to make sure it will
     * always work. The thing is - utf8_encode works only if
     * input is in latin-1 encoding
     * Must ask Maxmind about it just to be sure!
     * 
     * @param string $name
     * @param string $val
     * @return object $this object
     */
    public function set($name, $val){
    	if(\array_key_exists($name, $this->aData)){
    		$this->aData[$name] = \utf8_encode($val);
    	}

    	return $this;
    }


    /**
     * Getter for $this->aData array
     * @return array
     */
    public function getData(){
    	return $this->aData;
    }


    /**
     * Magic method to get value from $this->aData array
     * @param string $name
     * @return mixed string if value exists or null if it is empty of
     * just does not exist
     */
    public function __get($name){
    	if(array_key_exists($name, $this->aData)){
    		return $this->aData[$name];
    	}

    	return null;
    }


    /**
     * Magic method
     * makes it possible to check if specific record exists
     * and also makes it possible to use empty() on any property
     *
     * @param $name
     * @return bool
     */
    public function __isset($name){
    	return (null !== $this->__get($name));
    }

    
    /**
     * Get array of data but
     * rekeyed to use short keys and
     * not all elements as in Data
     *
     * @return array
     */
    public function getData2(){
    	$a = array();
    	foreach($this->aData as $key => $val){
    		if(array_key_exists($key, $this->aData2)){
    			$a[$this->aData2[$key]] = $val;
    		}
    	}

    	return $a;
    }

}
