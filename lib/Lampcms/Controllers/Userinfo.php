<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms\Controllers;

use Lampcms\UserVotesBlock;
use Lampcms\WebPage;
use Lampcms\User;
use Lampcms\Template\Urhere;
use Lampcms\ProfileDiv;
use Lampcms\UserTagsBlock;
use Lampcms\UserFollowedTags;
use Lampcms\UserQuestions;
use Lampcms\UserAnswers;

/**
 * Controller for the /users/$uid/$username page
 *
 * @author Dmitri Snytkine
 *
 */
class Userinfo extends WebPage
{

	protected $layoutID = 1;

	protected $aRequired = array('uid');

	protected $aAllowedVars = array('username', 'mode', 'sort');

	protected $oUser;

	protected $vars = array(
	'profile' => '',
	'questions' => '',
	'answers' => '',
	'votes' => '',
	'tags' => '');

	protected function main(){
		$this->getUser()
		->checkUsername()
		->addProfile()
		->addQuestions()
		->addAnswers()
		->addVotes()
		->addFollowedTags()
		->addTags();
	}


	/**
	 * Create $this->oUser object
	 * that represents User whose profile
	 * is being viewed currently
	 *
	 * @throws \Lampcms\Exception if user could not be
	 * found by user id passed in request
	 *
	 * @return object $this
	 */
	protected function getUser(){
		$a = $this->oRegistry->Mongo->USERS->findOne(array('_id' => $this->oRequest['uid']));

		if(empty($a)){
			throw new \Lampcms\Exception('User not found');
		}

		$this->oUser = User::factory($this->oRegistry, $a);
		$this->aPageVars['title'] = $this->oUser->getDisplayName();

		return $this;
	}


	/**
	 * Check that username passed in url matches the
	 * username of user.
	 *
	 * @throws \Lampcms\RedirectException in case username passed
	 * in url does not match actual username for this user, in which
	 * case there will be a redirect to user with correct user name.
	 * This is basically good for SEO to prevent possibility of different urls
	 * pointing to the same page
	 *
	 * @return object $this
	 */
	protected function checkUsername(){
		$supplied = $this->oRequest->get('username', 's', '');

		if(!empty($supplied)){
			$username = $this->oUser->username;
			if(!empty($username) && (strtolower($username) !== strtolower($supplied) )){
				d('supplied username '.$supplied.' is not the same as actual username: '.$username);

				throw new \Lampcms\RedirectException('/users/'.$this->oRequest['uid'].'/'.$username);
			}
		}

		return $this;
	}


	/**
	 * Add profile block
	 *
	 * @return object $this
	 */
	protected function addProfile(){
		$profile = ProfileDiv::factory($this->oRegistry)->setUser($this->oUser)->getHtml();
		$this->aPageVars['body'] = $profile;
		
		return $this;
	}


	/**
	 * Add block with user questions
	 *
	 * @return object $this
	 *
	 * @todo finish up with pagination
	 *
	 */
	protected function addQuestions(){

		/**
		 *
		 * html of parsed questions and pagination links
		 * at the bottom all wrapped inside <div class="user_tags">
		 * @var $userQuestions
		 */
		$userQuestions = UserQuestions::get($this->oRegistry, $this->oUser);

		/**
		 * UserQuestions::get() may return an empty string
		 * if this user does not have
		 * any questions in which case skip the
		 * rest of the method
		 */
		if(empty($userQuestions)){
			return $this;
		}

		$cond = $this->oRegistry->Request->get('sort', 's', 'recent');
		$tabs = Urhere::factory($this->oRegistry)->get('tplSortuq', $cond, array('uid' => $this->oUser->getUid()));

		$questiondBlock = '<div id="uquestions" class="sortable paginated">'.$userQuestions.'</div>';

		$this->aPageVars['body'] .= $tabs.$questiondBlock;

		return $this;
	}


	/**
	 * Add block with user's answers
	 *
	 * @return object $this
	 *
	 * @todo finish up with pagination
	 *
	 */
	protected function addAnswers(){

		/**
		 *
		 * html of parsed answers and pagination links
		 * at the bottom all wrapped inside <div class="user_answers">
		 * @var $userQuestions
		 */
		$userQuestions = UserAnswers::get($this->oRegistry, $this->oUser);

		/**
		 * UserQuestions::get() may return an empty string
		 * if this user does not have
		 * any answers in which case skip the
		 * rest of the method
		 */
		if(empty($userQuestions)){
			return $this;
		}

		$cond = $this->oRegistry->Request->get('sort', 's', 'recent');
		$tabs = Urhere::factory($this->oRegistry)->get('tplSortuans', $cond, array('uid' => $this->oUser->getUid()));

		$ansBlock = '<div id="useranswers" class="cp fl sortable paginated">'.$userQuestions.'</div>';

		$this->aPageVars['body'] .= $tabs.$ansBlock;

		return $this;
	}


	/**
	 * Add block with user votes stats
	 *
	 * @return object $this
	 */
	protected function addVotes(){
		$this->aPageVars['body'] .= UserVotesBlock::get($this->oRegistry, $this->oUser);

		return $this;
	}


	/**
	 * Add block with user's tags
	 *
	 * @return object $this
	 */
	protected function addTags(){

		$this->aPageVars['body'] .= UserTagsBlock::get($this->oRegistry, $this->oUser);

		return $this;
	}


	/**
	 * Add block that shows tags that this user
	 * is following and also possibly block with tags
	 * that both Viewer and User are following
	 *
	 * @return object $this
	 */
	protected function addFollowedTags(){

		$this->aPageVars['body'] .= UserFollowedTags::get($this->oRegistry, $this->oUser);


		return $this;
	}

}
