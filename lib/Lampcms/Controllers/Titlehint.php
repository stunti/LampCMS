<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms\Controllers;

use \Lampcms\Utf8String;
use \Lampcms\WebPage;
use \Lampcms\TitleTokenizer;
use \Lampcms\Responder;

/**
 * This controller is used by title auto-complete widgets
 * for search form and by "Ask" form for title auto-complete
 * 
 * 
 * @author Dmitri Snytkine
 *
 */
class Titlehint extends WebPage
{

	protected $aRequired = array('q');
	
	protected $aData = array();

	protected function main(){
		$disabled = $this->oRegistry->Ini->DISABLE_AUTOCOMPLETE;
		if($disabled){
			exit;
		}

		$this->getData()->sendResult();
	}


	/**
	 * Find data in Mongo
	 * and create array of $this->aData
	 *
	 * @return object $this
	 */
	protected function getData(){

		$aTokens = TitleTokenizer::factory($this->oRequest->getUTF8('q'))->getArrayCopy();

		if(!empty($aTokens)){
			d('looking for something');
			try{
				$cur = $this->oRegistry->Mongo->QUESTIONS->find(array('a_title' => array('$all' => $aTokens), 'a_deleted' => null), array('_id', 'title', 'url', 'intro', 'hts', 'status', 'i_ans', 'ans_s'))
				->sort(array('status' => 1, 'i_ans' => -1))
				->limit(12);
				$this->aData = iterator_to_array($cur, false);
				d('$this->aData: '.print_r($this->aData, 1));
			} catch(\MongoException $e){
				d('MongoException: '.$e->getMessage().' aTokens was: '.print_r($this->aTokens, 1));
			}
		}

		return $this;
	}


	/**
	 * Send result back to client
	 * as JSONP string
	 *
	 * @return string
	 */
	protected function sendResult(){
		$callback =  $this->oRequest->get('callback');
		d('$callback: '.$callback);

		Responder::sendJSONP(array('ac' => $this->aData), $callback);
	}
}
