<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms\Controllers;

use \Lampcms\Responder;
use \Lampcms\WebPage;
use \Lampcms\Answer;
use \Lampcms\Question;
use \Lampcms\Request;
use \Lampcms\Mailer;

/**
 * Controller for processing the
 * "Flag item as inappropriate"
 * 
 * @author Dmitri Snytkine
 *
 */
class Flagger extends WebPage
{

	/**
	 * Template of report email
	 *
	 * @todo translate string
	 *
	 * @var string
	 */
	protected $EMAIL_BODY = '
	User: %1$s
	Profile: %2$s
	
	Reported this %3$s
	%4$s
	
	Message body: %5$s
	
	Reason: %6$s
	
	Note: %7$s
	
	';

	protected $SUBJECT = 'Flagged item';

	const TIME_PERIOD = 86400;

	const MAX_FLAGS = 10;

	protected $membersOnly = true;

	protected $requireToken = true;

	protected $aRequired = array('rid', 'rtype');

	protected $oResource;

	/**
	 * Name of collection
	 * Usually QUESTIONS or ANSWERS
	 *
	 * @var string
	 */
	protected $collection;


	protected function main(){
		$this->collection = ('q' == $this->oRequest['rtype']) ? 'QUESTIONS' : 'ANSWERS';
		$this->checkReportFlood()
		->getResource()
		->updateResource()
		->logReport()
		->notifyModerators()
		->returnResult();
	}


	/**
	 * Create object of type Question or Answer
	 *
	 * @return object $this
	 */
	protected function getResource(){

		d('type: '.$this->collection);
		$coll = $this->oRegistry->Mongo->getCollection($this->collection);
		$a = $coll->findOne(array('_id' => (int)$this->oRequest['rid']));
		d('a: '.print_r($a, 1));

		if(empty($a)){
				
			throw new \Lampcms\Exception('Item not found');
		}

		$class = ('QUESTIONS' === $this->collection) ? '\\Lampcms\\Question' : '\\Lampcms\\Answer';

		$this->oResource = new $class($this->oRegistry, $a);

		return $this;
	}


	/**
	 * Increase count of flags for this item
	 *
	 * @return object $this
	 */
	protected function updateResource(){
		$coll = $this->oRegistry->Mongo->getCollection($this->collection);
		$coll->update(array("_id" => (int)$this->oRequest['rid']), array('$inc' => array("i_flags" => 1)), array("fsync" => true));

		return $this;
	}


	/**
	 * Check that user is not abusing "Flag"
	 * option
	 * Maximum allowed uses is 5 in 24 hours
	 * but this does not apply to moderator
	 *
	 * @throws \Lampcms\Exception
	 */
	protected function checkReportFlood(){
		$oViewer = $this->oRegistry->Viewer;
		if(!$oViewer->isModerator()){

			$since = time() - self::TIME_PERIOD; // 24 hours
			$cur = $this->oRegistry->Mongo->REPORTED_ITEMS
			->find(array('i_uid' => $this->oRegistry->Viewer->getUid(), 'i_ts' => array('$gt' => $since)), array('i_ts', 'hts'));

			if($cur && ($cur->count(true) > self::MAX_FLAGS) ){

				throw new \Lampcms\Exception('You have reached the limit of '.self::MAX_FLAGS.' reports in 24 hours');
			}
		}

		return $this;
	}


	/**
	 * Insert this flag report into FLAGGED_ITEMS collection
	 *
	 * Enter description here ...
	 */
	protected function logReport(){
		$data = array(
		'i_ts' => time(),
		'h_ts' => date('r'),
		'i_res' => $this->oRequest['rid'],
		'rtype' => $this->oRequest['rtype'],
		'i_uid' => $this->oRegistry->Viewer->getUid(),
		'username' => $this->oRegistry->Viewer->getDisplayName(),
		'note' => $this->oRequest->getUTF8('note')->stripTags()->valueOf()
		);

		$coll = $this->oRegistry->Mongo->REPORTED_ITEMS;
		$coll->ensureIndex(array('i_uid' => 1));

		$coll->insert($data);

		return $this;
	}


	/**
	 * Make body of email
	 * using template self::EMAIL_BODY
	 *
	 * @return string body of email to be sent to moderators
	 */
	protected function makeBody(){
		$vars = array(
		$this->oRegistry->Viewer->getDisplayName(),
		$this->oRegistry->Ini->SITE_URL.$this->oRegistry->Viewer->getProfileUrl(),
		('q' == $this->oRequest['rtype']) ? 'Question' : 'Answer',
		$this->oResource->getUrl(),
		$this->oResource['b'],
		$this->oRequest->get('reason', 's', 'not given'),
		$this->oRequest['note']
		);

		d('vars: '.print_r($vars, 1));

		$body = vsprintf($this->EMAIL_BODY, $vars);

		d('body '.$body);

		return $body;
	}


	/**
	 *
	 * Send out emails to all moderators
	 *
	 * @return object $this
	 */
	protected function notifyModerators(){

		$cur = $this->oRegistry->Mongo->USERS->find(array(
  			'role' => array('$in' => array('moderator', 'administrator'))
		), array('email'));

		d('found '.$cur->count().' moderators');

		if($cur && $cur->count() > 0){
			$Mailer = Mailer::factory($this->oRegistry);
			$subject = $this->SUBJECT;
			$body = $this->makeBody();
			$aTo = array();
			foreach($cur as $row){
				$aTo[] = $row['email'];
			}
			
			d('aTo: '.print_r($aTo, 1));
			$Mailer->mail($aTo, $subject, $body);
		}

		return $this;

	}


	protected function returnResult(){
		/**
		 * @todo translate string
		 */
		$message = 'Thank you for caring!<br>Moderators have been notified';
		if(Request::isAjax()){
			Responder::sendJSON(array('alert' => $message));
		}

		Responder::redirectToPage($this->oResource->getUrl());
	}

}
