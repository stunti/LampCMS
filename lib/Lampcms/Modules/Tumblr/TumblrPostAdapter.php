<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms\Modules\Tumblr;


use \Lampcms\LampcmsObject;
use \Lampcms\Interfaces\Post;
use \Lampcms\Interfaces\Question;
use \Lampcms\Interfaces\Answer;
use \Lampcms\Registry;

/**
 * Adapter class that takes in
 * Question or Answer
 * and returns object TumblrContent which can
 * then be used to post to TumblrApi
 * That object TumblrContent is usually a TumblrPost object
 * but can also be TumblrLink in we decide to just post
 * a Link to Tumblr instead of a full Blog post
 * Enter description here ...
 *
 * @author Dmitri Snytkine
 *
 */
class TumblrPostAdapter extends LampcmsObject
{

	/**
	 * TumblrPost object
	 *
	 * @var object of type TumblrPost
	 */
	protected $oTumblrPost;

	public function __construct(Registry $o){
		$this->oRegistry = $o;
	}


	/**
	 * Main method to get the TumblrPost object
	 * from the Question or Answer input object
	 *
	 * @param Post $o object of type Post which
	 * could be Question OR Answer
	 *
	 * @return object of type TumblrPost
	 */
	public function get(Post $o){
		d('cp');
		if($o instanceof Question){
			$this->makeQuestionPost($o);
		} elseif($o instanceof Answer){
			$this->makeAnswerPost($o);
		}
		d('cp');

		return $this->getTumblrPost();
	}


	/**
	 * Getter for $this->oTumblrPost
	 * @return object of type TumblrPost
	 */
	public function getTumblrPost(){
		return $this->oTumblrPost;
	}


	/**
	 *
	 * Setup values in $this->oTumblrPost using
	 * values of Question
	 *
	 * @param Question $o
	 */
	protected function makeQuestionPost(Question $o){
		d('cp');
		$this->oTumblrPost = new TumblrPost();

		/**
		 * @todo Translate strings
		 *
		 * @var string
		 */
		$qUrl = $o->getUrl();
		$tpl1 = '<p><a href="%s"><strong>My question</strong></a> on %s</p>';
		$tpl2 = '<p><a href="%s">Click here</a> to post your reply</p><br>';
		$body = sprintf($tpl1, $qUrl, $this->oRegistry->Ini->SITE_NAME);
		$body .= $o->getBody();
		$body .= sprintf($tpl2, $qUrl);

		$this->oTumblrPost->setBody($body)->setTitle($o->getTitle());

		$tags = $o['a_tags'];
		d('$tags: '.print_r($tags, 1));
		if(!empty($tags)){
			$this->oTumblrPost->setTags($tags);
		}

		d('cp');
		$this->oTumblrPost->setSlug($o->getSeoUrl());

		return $this;
	}


	/**
	 *
	 * Setup values in $this->oTumblrPost using
	 * values of Answer
	 *
	 * @param Answer $o
	 */
	protected function makeAnswerPost(Answer $o){
		d('cp');
		$this->oTumblrPost = new TumblrPost();
		$qlink = $this->oRegistry->Ini->SITE_URL.'/q'.$o->getQuestionId().'/';

		/**
		 * @todo Translate string
		 *
		 * @var string
		 */
		$tpl = '<p>This is my answer to a <a href="%s"><strong>question</strong></a> on %s</p><br>';
		$body = sprintf($tpl, $qlink, $this->oRegistry->Ini->SITE_NAME);

		$body .= $o->getBody();
		d('body: '.$body);

		$title = 'My answer to "'.$o->getTitle().'"';

		$this->oTumblrPost->setBody($body)->setTitle($title);

		return $this;
	}
}
