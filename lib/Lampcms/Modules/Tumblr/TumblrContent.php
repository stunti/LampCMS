<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms\Modules\Tumblr;

/**
 * Abstract class represents a post to
 * be submitted to Tumblr Write API
 *
 * A concrete class will represent Blog post, Photo, Link, Video or Audio
 *
 * @author Dmitri Snytkine
 *
 */
abstract class TumblrContent
{
	protected $state = 'published';

	protected $private = 0;

	protected $id = null;

	public function getID(){
		return $this->id;
	}

	public function setID($id){
		if(!is_numeric($id)){
			throw new \InvalidArgumentException('$id must be numeric. Was: '.$id);
		}

		$this->id = (int)$id;
	}

	/**
	 * Get the type of content
	 * sub-class must implement this
	 *
	 * @return string
	 */
	abstract public function getType();


	/**
	 *
	 * Enter description here ...
	 */
	public function getGenerator(){
		return 'LampCMS Tumblr API Client';
	}


	/**
	 *
	 * Getter for $this->state
	 * @return string default is 'published'
	 */
	public function getState(){
		return $this->state;
	}


	/**
	 * Set content to 'private'
	 * @return object $this
	 */
	public function setPrivate(){
		$this->private = 1;

		return $this;
	}


	/**
	 * Set this content as public
	 *
	 * @return object $this
	 */
	public function setPublic(){
		$this->private = 0;

		return $this;
	}


	/**
	 * Getter for $this->private
	 *
	 * @return int 0 means not private 1 means private
	 *
	 */
	public function getPrivate(){
		return $this->private;
	}


	/**
	 * Set the state of post
	 *
	 *
	 * @param string $state must be one of these strings:
	 * 'published',
	 *	'submission',
	 *	'draft',
	 *	'queue',
	 *	'publish-on'
	 *
	 * @throws \InvalidArgumentException
	 *
	 * @return object $this
	 */
	public function setState($state){
		if(!is_string($state)){
			throw new \InvalidArgumentException('$state must be a string. Was: '.gettype($state));
		}

		$aAllowed = array(
		'published', 
		'submission', 
		'draft', 
		'queue', 
		'publish-on');

		if(!in_array($state, $aAllowed)){
			throw new \InvalidArgumentException('value of $state must be one of these strings: '.implode(',', $aAllowed).
			' Was: '.$state);
		}

		$this->state = (string)$state;

		return $this;
	}

}
