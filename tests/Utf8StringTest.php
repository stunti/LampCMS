<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;
require_once 'bootstrap.php';

/**
 * @todo test with some bad invalid chars to NOT validate
 * @todo fix string with bad chars
 * @todo remove BOM from string
 *
 */
class Utf8StringTest extends LampcmsUnitTestCase
{
	const UTF8_RUSSIAN = "\xD0\xBE\xD1\x82\xD0\xBA\xD0\xB0\xD0\xB7\xD0\xB0\xD0\xBB\xD0\xB0\xD1\x81\xD1\x8C\x20\xD0\xBE\xD1\x82\x20\xD1\x80\xD0\xB0\xD0\xB7\xD1\x80\xD0\xB0\xD0\xB1\xD0\xBE\xD1\x82\xD0\xBA\xD0\xB8";

	const UTF8_RUSSIAN_UP = "\xD0\x9E\xD0\xA2\xD0\x9A\xD0\x90\xD0\x97\xD0\x90\xD0\x9B\xD0\x90\xD0\xA1\xD0\xAC\x20\xD0\x9E\xD0\xA2\x20\xD0\xA0\xD0\x90\xD0\x97\xD0\xA0\xD0\x90\xD0\x91\xD0\x9E\xD0\xA2\xD0\x9A\xD0\x98";

	const UTF8_CHINISE = "\xE6\x8B\x9B\xE6\x8A\x95\xE6\xA0\x87";

	const UTF8_ART = "\xE2\x80\xA0\xE2\x99\x9A"; // Dagger, Crown

	const BAD_STRING = "Invalid 3-octet char \xe2\x28\xa1 here";

	public function getUtf8String(){
		return array(
		array(self::UTF8_CHINISE),
		array(self::UTF8_RUSSIAN),
		array(self::UTF8_RUSSIAN_UP),
		array(self::UTF8_ART)
		);
	}

	public function getInvalidUtf8String(){
		return array(
		array("Invalid char \xe9 here"),
		array("Invalid 2-octet char \xa0\xa1 here"),
		array("Invalid 3-octet char \xe2\x28\xa1 here"),
		array("Invalid 4-octet char \xf0\x28\x8c\xbc here")
		);
	}

	/**
	 * @dataProvider getUtf8String
	 *
	 */
	public function testValidateUtf8($s){
		$this->assertTrue(Utf8String::validateUtf8($s));
	}

	/**
	 * @dataProvider getInvalidUtf8String
	 *
	 */
	public function testValidateInvalidUtf8($s){
		$this->assertFalse(Utf8String::validateUtf8($s));
	}

	public function testToUpperCase(){
		$upper = Utf8string::factory(self::UTF8_RUSSIAN)->toUpperCase()->valueOf();
		$this->assertEquals( self::UTF8_RUSSIAN_UP, $upper);
	}

	public function testToLowercase(){
		$upper = Utf8string::factory(self::UTF8_RUSSIAN_UP )->toLowerCase()->valueOf();
		$this->assertEquals( self::UTF8_RUSSIAN, $upper);
	}

	public function testLength(){
		$this->assertEquals(24, Utf8String::factory(self::UTF8_RUSSIAN)->length());
		$this->assertEquals(24, Utf8String::factory(self::UTF8_RUSSIAN_UP)->length());
	}


	public function testSubstr(){
		$o = Utf8String::factory(self::UTF8_RUSSIAN, 'utf-8', true);
		$sub = (string)$o->substr(4, 3);

		$o2 = Utf8String::factory(self::UTF8_RUSSIAN_UP, 'utf-8', true);
		$sub2 = (string)$o2->substr(4, 3);

		$this->assertEquals("\xD0\xB7\xD0\xB0\xD0\xBB", $sub);
		$this->assertEquals("\xD0\x97\xD0\x90\xD0\x9B", $sub2);
	}


	public function testUcWords(){
		$o = Utf8String::factory(self::UTF8_RUSSIAN, 'utf-8', true);
		$uc = "\xD0\x9E\xD1\x82\xD0\xBA\xD0\xB0\xD0\xB7\xD0\xB0\xD0\xBB\xD0\xB0\xD1\x81\xD1\x8C\x20\xD0\x9E\xD1\x82\x20\xD0\xA0\xD0\xB0\xD0\xB7\xD1\x80\xD0\xB0\xD0\xB1\xD0\xBE\xD1\x82\xD0\xBA\xD0\xB8";
		$ucf = (string)$o->ucwords();
		$this->assertEquals($uc, $ucf);
	}


	public function testUcFirst(){
		$o = Utf8String::factory(self::UTF8_RUSSIAN, 'utf-8', true);
		$ucf = (string)$o->ucfirst();
		$uc = "\xD0\x9E\xD1\x82\xD0\xBA\xD0\xB0\xD0\xB7\xD0\xB0\xD0\xBB\xD0\xB0\xD1\x81\xD1\x8C\x20\xD0\xBE\xD1\x82\x20\xD1\x80\xD0\xB0\xD0\xB7\xD1\x80\xD0\xB0\xD0\xB1\xD0\xBE\xD1\x82\xD0\xBA\xD0\xB8";
		$this->assertEquals($uc, $ucf);
	}

	public function testGetWordsCount(){
		$o = Utf8String::factory(self::UTF8_RUSSIAN);
		$this->assertEquals(3, $o->getWordsCount());
	}


	public function testStripLow(){
		$s = "String with tab	and \nNew Line1\nNew Line2";
		$this->assertEquals($s, Utf8String::stripLow($s));
	}

	public function testSanitizeString(){

	}

	public function testSanitizeAscii(){

	}

	public function testRecodeUtf8(){

	}
}
