<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;

require_once 'bootstrap.php';


class LampcmsArrayTest extends LampcmsUnitTestCase
{
	protected $o;

	protected $aInput = array('one' => 1, 'two' => 2, 'three' => 3);

	public function setUp(){

		$this->o = new LampcmsArray($this->aInput);
	}


	public function testIsset(){
		$good = isset($this->o['one']);

		$good2 = isset($this->o['two']);
		if(true !== $good || true !== $good2){
			$this->fail('offsetExists() failed to find good key');
		}
		$bad =  isset($this->o['stuff']);
		if(false !== $bad){
			$this->fail('offsetExists() reported non-existant value as exists');
		}
	}


	public function testAddArray(){
		$a = array('four' => 4);
		$this->o->addArray($a);

		$this->assertTrue(4 === $this->o['four']);
	}

	public function testGetMerged(){
		$a = array('four' => 4);
		$res = $this->o->getMerged($a);

		$this->assertTrue(is_array($res) && (1 === $res['one']) && (4 === $res['four']) );
	}

	public function testGetMergedWrongClass(){
		$wrongClass = new \stdClass();
		try{
			$res = $this->o->getMerged($wrongClass);
		} catch (\InvalidArgumentException $e){
			return;
		}

		$this->fail('InvalidArgumentException expected but not thrown');
	}


	public function testGetMergedWrongInput(){
		$input = 'test';
		try{
			$res = $this->o->getMerged($input);
		} catch (\InvalidArgumentException $e){
			return;
		}

		$this->fail('InvalidArgumentException expected but not thrown');
	}


	public function testUnset(){
		unset($this->o['three']);
		$this->assertTrue(!$this->o->offsetExists('three'));
	}
	
	
	public function testSerialization(){
		$this->o['five'] = 5;
		$s = serialize($this->o);
		$oNew = unserialize($s);
		
		$this->assertEquals(1, $oNew['one']);
		$this->assertEquals(2, $oNew['two']);
		$this->assertEquals(3, $oNew['three']);
		$this->assertEquals(5, $oNew['five']);
		$this->assertTrue(4 === count($oNew) );
	}

}
