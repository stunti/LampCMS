<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;
require_once 'bootstrap.php';

class LampcmsRequestTest extends LampcmsUnitTestCase
{


	public function setUp(){
		if(!isset($_SERVER)){
			$_SERVER = array();
		}

		if(!isset($_REQUEST)){
			$_REQUEST = array();
		}
	}

	public function testGetRequestMethod(){

		$this->assertEquals(null, Request::getRequestMethod());

		$_SERVER['REQUEST_METHOD'] = 'get';
		$this->assertEquals('GET', Request::getRequestMethod());

		$_SERVER['REQUEST_METHOD'] = 'post';
		$this->assertEquals('POST', Request::getRequestMethod());

	}


	public function testGetIP(){
		$this->assertEquals('127.0.0.2', Request::getIP());

		$_SERVER['REMOTE_ADDR'] = '71.207.145.21';
		$this->assertEquals('71.207.145.21', Request::getIP());
	}


	public function testGetUserAgent(){
		$this->assertEquals(null, Request::getUserAgent());

		$_SERVER['HTTP_USER_AGENT'] = 'Mozilla 5';
		$this->assertEquals('Mozilla 5', Request::getUserAgent());
	}


	public function testGetHttpHeader(){
		$this->assertEquals(null , Request::getHttpHeader('X-REQUESTED-WITH'));

		$_SERVER['HTTP_ACCEPT_CHARSET'] = 'ISO-8859-1,utf-8;q=0.7,*;q=0.7';
		$this->assertEquals('ISO-8859-1,utf-8;q=0.7,*;q=0.7' , Request::getHttpHeader('Accept-Charset'));
	}

	public function testGetHttpHeaderUseApacheHeaders(){
		if(defined('HAS_APACHE_REQUEST_HEADERS')){
			$this->markTestSkipped(
              'This test is probably run from browser, skipping'
              );
		}

		$this->assertEquals('ISO-8859-1,utf-8;q=0.7,*;q=0.7' , Request::getHttpHeader('Accept-Charset'));
		$this->assertEquals('gzip,deflate' , Request::getHttpHeader('Accept-encoding'));
		$this->assertEquals('gzip,deflate' , Request::getHttpHeader('ACCEPT-ENCODING'));
		$this->assertNotEquals('gzip,deflate' , Request::getHttpHeader('ACCEPT_ENCODING'));
	}


	public function testGetUTF8(){
		$Request = new Request(array('name' => 'bob'));
		$this->assertInstanceOf('\Lampcms\Utf8String', $Request->getUTF8('name'));
		$this->assertInstanceOf('\Lampcms\Utf8String', $Request->getUTF8('stuff'));
		$this->assertEquals('bob', (string)$Request->getUTF8('name'));
	}

	public function testGetDefaultVal(){
		$Request = new Request(array('name' => 'bob'));

		$this->assertSame('stuff', $Request->get('bad', 's', 'stuff'));
		$this->assertSame(5, $Request->get('bad', 'i', 5));
	}

	public function testGetDefaultUTF8Val(){
		$Request = new Request(array('name' => 'bob'));

		$this->assertSame('stuff', (string)$Request->getUTF8('bad', 'stuff'));
	}


	public function testRequiredNotPresent(){
		$Request = new Request(array('name' => 'bob'));
		$Request->setRequired(array('fruit'));
		try{
			$Request->checkRequired();
		} catch (\LogicException $e){
			return;
		}

		$this->fail('Expected \LogicException when required param not found in Request');
	}

	public function testRequiredPresent(){
		$Request = new Request(array('name' => 'bob'));
		$Request->setRequired(array('name'));
		$Request->checkRequired();
	}


	public function testBadValueOf(){
		$Request = new Request(array('a' => 'abc234'));
		try{
			$val = $Request['a'];
		} catch(\InvalidArgumentException $e){
			return;
		}

		$this->fail('InvalidArgumentException expected when value of "a" param in not all-letters');
	}
	
	
	public function testDefaultPageID(){
		$Request = new Request(array('script' => 'ts'));
		$this->assertSame(1, $Request['pageID']);
	}

	public function testBadParamName(){
		$Request = new Request(array('script' => 'ts'));
		$val = $Request['<script>script</script>'];
		$this->assertEquals('ts', $val);
	}


	public function testParamDoesNotExist(){
		$Request = new Request(array('script' => 'ts'));
		try{
			$val = $Request['fruit'];
		} catch(\Lampcms\DevException $e){
			return;
		}

		$this->fail('\Lampcms\DevException expected when param does not exist');
	}
	
	
	public function testFactory(){
		$Request = Request::factory();
		$this->assertInstanceOf('\Lampcms\Request', $Request);
	}

}
