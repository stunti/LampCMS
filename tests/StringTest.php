<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;
require_once 'bootstrap.php';

class StringTest extends \PHPUnit_Framework_TestCase
{
	const MY_STRING = 'http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3';

	const MULTI_LINE = 'What is?
	This is line1.
	
	This is line4!';


	public function testConstructor(){
		$o = new String(self::MY_STRING);
		$this->assertTrue($o instanceof \Lampcms\String);
	}

	/**
	 * @depends testConstructor
	 *
	 */
	public function testConstructorInputIsStringObject(){
		$o = new String(self::MY_STRING);
		$o2 = new String($o);
		$this->assertTrue($o2 instanceof \Lampcms\String);
	}


	/**
	 * @depends testConstructor
	 *
	 */
	public function testConstructorInputIsWrongObject(){
		$o = new \stdClass();
		try{
			$o2 = new String($o);
		} catch(\InvalidArgumentException $e){
			return;
		}

		$this->fail('\InvalidArgumentException expected when input is object NOT of type String');
	}


	/**
	 * @depends testConstructor
	 *
	 */
	public function testFactory(){
		$o = String::factory(self::MY_STRING);
		$this->assertTrue($o instanceof \Lampcms\String);
	}


	/**
	 * @depends testConstructor
	 *
	 */
	public function testToString(){
		$o = String::factory(self::MY_STRING);
		$this->assertEquals(self::MY_STRING, (string)$o);
	}

	/**
	 * @depends testToString
	 *
	 */
	public function testToUpperCase(){
		$o = new String(self::MY_STRING);
		$this->assertEquals('HTTP://WWW.GNU.ORG/LICENSES/LGPL-3.0.TXT GNU LESSER GENERAL PUBLIC LICENSE (LGPL) VERSION 3', (string)$o->toUpperCase());
	}

	/**
	 * @depends testToString
	 *
	 */
	public function testToLowerCase(){
		$o = new String(self::MY_STRING);
		$this->assertEquals('http://www.gnu.org/licenses/lgpl-3.0.txt gnu lesser general public license (lgpl) version 3', (string)$o->toLowerCase());
	}

	public function testHashCode(){
		$o = new String(self::MY_STRING);
		$this->assertEquals('0c777b47a1044c3fa723a093ad8367ae', $o->hashCode());
	}

	public function testGetCrc32(){
		$o = new String(self::MY_STRING);
		$this->assertEquals('-786097747', $o->getCrc32());
	}

	public function testLinesCount(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals(4, $o->getLinesCount());
	}

	public function testHashPassword(){
		$pass = 'abcde12345';
		$res = String::hashPassword($pass);
		$this->assertEquals('d4dbd1e3aaa2974dc7692ec5f748d2c678ca013e00801acce5e29877514296f6', $res);
	}

	public function testMakePasswd(){
		$res = String::makePasswd(10, 10);
		$this->assertTrue(10 === strlen($res));
		$this->assertTrue(1 === preg_match('/([a-zA-Z0-9]{10})/', $res));
	}

	public function testGetReturnMode(){
		$o = new String(self::MY_STRING);
		$this->assertEquals('default', $o->getReturnMode());
	}

	public function testGetSentencesCount(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals(3, $o->getSentencesCount());
	}

	public function testGetWordsCount(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals(8, $o->getWordsCount());
	}

	public function testIsEmpty(){
		$o = new String(self::MULTI_LINE);
		$this->assertFalse($o->isEmpty());

		$o = new String('');
		$this->assertTrue($o->isEmpty());
	}

	public function testIsHtml(){
		$o = new String(self::MULTI_LINE);
		$this->assertFalse($o->isHtml());

		$o = new String('<div>some stuff</div>');
		$this->assertTrue($o->isHtml());
	}

	public function testLength(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals(45, $o->length());

		$o = new String('abcdefg');
		$this->assertEquals(7, $o->length());
	}

	/**
	 * @depends testToString
	 *
	 */
	public function testObfuscateEmail(){
		$e = 'absdefg@gmail.com';
		$o = new String($e);
		$res = (string)$o->obfuscateEmail();

		$this->assertNotEquals($e, $res);
		$this->assertContains('###', $res);
	}



	public function testPrepareEmail(){
		$e = 'absdefg@gmail.com';
		$fn = ' John';
		$ln = ' Smith ';

		$res = String::prepareEmail($e, $fn, $ln);
		$res2 = String::prepareEmail($e);

		$this->assertEquals('"John Smith" <absdefg@gmail.com>', $res);
		$this->assertEquals('absdefg@gmail.com', $res2);

	}

	/**
	 * @depends testToString
	 *
	 */
	public function testTruncate(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals('What is? This...', (string)$o->truncate(15));

		$o = new String(self::MY_STRING);
		$this->assertEquals('...', (string)$o->truncate(15));
	}


	/**
	 * @depends testToString
	 *
	 */
	public function testWrapInTag(){
		$o = new String(self::MULTI_LINE);
		$this->assertEquals('<div>'.self::MULTI_LINE.'</div>', (string)$o->wrapInTag('div'));

	}


	public function testStringBuilderMode(){
		$o = new String(self::MY_STRING);
		$o->setReturnMode('StringBuilder');
		$o2 = $o->toUpperCase();
		$this->assertTrue($o===$o2);
	}

	public function testDefaultReturnMode(){
		$o = new String(self::MY_STRING);
		$o2 = $o->toUpperCase();
		$this->assertFalse($o===$o2);
	}

	/**
	 * @depends testToString
	 *
	 */
	public function testMakeLinkTitle(){
		$title = 'This is the Article about a title of my book';
		$o = new String($title);
		$this->assertEquals('This-Article-about-title-book', (string)$o->makeLinkTitle());

		$o2 = new String(self::MULTI_LINE);
		$this->assertEquals('What-is-This-line1-This-line4', (string)$o2->makeLinkTitle());


		$o3 = new String('');
		$this->assertEquals('Question', (string)$o3->makeLinkTitle());

	}
	
	
	public function testSerialization(){
		$o = new String(self::MY_STRING);
		$o->setReturnMode('StringBuilder');
		$s = serialize($o);
		$o2 = unserialize($s);
		$this->assertEquals('StringBuilder', $o2->getReturnMode());
		$this->assertEquals(self::MY_STRING, $o2->valueOf());
	}

}
